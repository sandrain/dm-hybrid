diff -Nur linux-2.6.39/drivers/md/Kconfig linux-2.6.39-dmhybrid/drivers/md/Kconfig
--- linux-2.6.39/drivers/md/Kconfig	2011-05-19 00:06:34.000000000 -0400
+++ linux-2.6.39-dmhybrid/drivers/md/Kconfig	2011-12-02 20:08:33.000000000 -0500
@@ -333,4 +333,16 @@
        ---help---
          A target that intermittently fails I/O for debugging purposes.
 
+config DM_CACHE
+	tristate "Cache target support (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	  Support for generic cache target for device-mapper.
+
+config DM_HYBRID
+	tristate "Hybrid target support (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	  A target supports hybrid device using ssd and hdd.
+
 endif # MD
diff -Nur linux-2.6.39/drivers/md/Makefile linux-2.6.39-dmhybrid/drivers/md/Makefile
--- linux-2.6.39/drivers/md/Makefile	2011-05-19 00:06:34.000000000 -0400
+++ linux-2.6.39-dmhybrid/drivers/md/Makefile	2011-12-02 20:08:28.000000000 -0500
@@ -37,6 +37,8 @@
 obj-$(CONFIG_DM_MIRROR)		+= dm-mirror.o dm-log.o dm-region-hash.o
 obj-$(CONFIG_DM_LOG_USERSPACE)	+= dm-log-userspace.o
 obj-$(CONFIG_DM_ZERO)		+= dm-zero.o
+obj-$(CONFIG_DM_CACHE)		+= dm-cache.o
+obj-$(CONFIG_DM_HYBRID)		+= dm-hybrid.o
 obj-$(CONFIG_DM_RAID)	+= dm-raid.o
 
 ifeq ($(CONFIG_DM_UEVENT),y)
diff -Nur linux-2.6.39/drivers/md/dm-hybrid.c linux-2.6.39-dmhybrid/drivers/md/dm-hybrid.c
--- linux-2.6.39/drivers/md/dm-hybrid.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.39-dmhybrid/drivers/md/dm-hybrid.c	2011-12-02 20:08:17.000000000 -0500
@@ -0,0 +1,170 @@
+/****************************************************************************
+ *  dm-hybrid.c
+ *  Device mapper target for hybrid device using SSD + HDD.
+ *
+ *  Author: Hyogi Sim (sandrain@gmail.com)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; under version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ ****************************************************************************/
+#include <linux/blk_types.h>
+#include <asm/atomic.h>
+#include <asm/checksum.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/list.h>
+#include <linux/blkdev.h>
+#include <linux/bio.h>
+#include <linux/slab.h>
+#include <linux/hash.h>
+#include <linux/spinlock.h>
+#include <linux/workqueue.h>
+#include <linux/pagemap.h>
+#include "dm.h"
+#include <linux/dm-io.h>
+#include <linux/dm-kcopyd.h>
+
+#define	DMH_DEBUG	1
+
+#define DM_MSG_PREFIX "hybrid"
+#define DMH_PREFIX "dm-hybrid: "
+
+#if DMH_DEBUG
+#define DPRINTK( s, arg... ) printk(DMH_PREFIX s "\n", ##arg)
+#else
+#define DPRINTK( s, arg... )
+#endif
+
+struct hybrid_c {
+	struct dm_dev *hdd;
+	struct dm_dev *ssd;
+};
+
+#define	get_hybrid(ti)		((struct hybrid_c *) (ti)->private)
+
+static int hybrid_ctr(struct dm_target *ti, unsigned int argc, char **argv)
+{
+	int ret = 0;
+	struct hybrid_c *hyc;
+	struct dm_dev *hdd;
+	struct dm_dev *ssd;
+
+	ret = dm_get_device(ti, argv[0],
+			  dm_table_get_mode(ti->table), &ssd);
+	if (ret < 0) {
+		ti->error = DMH_PREFIX "SSD device lookup failed";
+		return ret;
+	}
+
+	ret = dm_get_device(ti, argv[1],
+			  dm_table_get_mode(ti->table), &hdd);
+	if (ret < 0) {
+		ti->error = DMH_PREFIX "HDD device lookup failed";
+		return ret;
+	}
+
+	if ((hyc = kmalloc(sizeof(*hyc), GFP_KERNEL)) == NULL) {
+		ti->error = DMH_PREFIX "kamlloc failed";
+		return ENOMEM;
+	}
+
+	hyc->ssd = ssd;
+	hyc->hdd = hdd;
+	ti->private = hyc;
+
+	DPRINTK("hybrid_ctr");
+
+	return ret;
+}
+
+static void hybrid_dtr(struct dm_target *ti)
+{
+	struct hybrid_c *hyc = get_hybrid(ti);
+
+	dm_put_device(ti, hyc->ssd);
+	dm_put_device(ti, hyc->hdd);
+
+	kfree(hyc);
+
+	DPRINTK("hybrid_dtr");
+}
+
+static inline void dump_bio(struct bio *bio)
+{
+	DPRINTK("%s %llu %u",
+		bio_rw(bio) == READ ? "READ" : (bio_rw(bio) == READA ? "READA" : "WRITE"),
+		(u64) bio->bi_sector, bio_sectors(bio));
+}
+
+static int hybrid_map(struct dm_target *ti, struct bio *bio,
+		      union map_info *map_context)
+{
+	struct hybrid_c *hyc = get_hybrid(ti);
+
+	dump_bio(bio);
+
+	bio->bi_bdev = hyc->hdd->bdev;
+
+	return DM_MAPIO_REMAPPED;
+}
+
+static int hybrid_status(struct dm_target *ti, status_type_t type,
+			 char *result, unsigned int maxlen)
+{
+	struct hybrid_c *hyc = get_hybrid(ti);
+	int sz = 0;
+
+	DMEMIT("hybrid_status: %s (ssd), %s (hdd)",
+		hyc->ssd->name, hyc->hdd->name);
+
+	return 0;
+}
+
+static struct target_type hybrid_target = {
+	.name   = "hybrid",
+	.version= {1, 0, 1},
+	.module = THIS_MODULE,
+	.ctr    = hybrid_ctr,
+	.dtr    = hybrid_dtr,
+	.map    = hybrid_map,
+	.status = hybrid_status,
+};
+
+
+static int __init dm_hybrid_init(void)
+{
+	int ret = 0;
+
+	if ((ret = dm_register_target(&hybrid_target)) < 0) {
+		DMERR(DMH_PREFIX "register failed: %d", ret);
+		return ret;
+	}
+	DPRINTK("target registered");
+
+	return ret;
+}
+
+static void __exit dm_hybrid_exit(void)
+{
+	dm_unregister_target(&hybrid_target);
+	DPRINTK("target unregistered");
+}
+
+module_init(dm_hybrid_init);
+module_exit(dm_hybrid_exit);
+
+MODULE_DESCRIPTION(DM_NAME " hybrid target (ssd + hdd)");
+MODULE_AUTHOR("Hyogi Sim <sandrain@gmail.com>");
+MODULE_LICENSE("GPL");
+
